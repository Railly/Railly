---
import Card from "./Card.astro";
import CardIcon from "./CardIcon.astro";

type ColorName =
  | "blue"
  | "teal"
  | "yellow"
  | "cyan"
  | "purple"
  | "magenta"
  | "orange";

interface Props {
  title: string;
  description: string;
  color: ColorName;
  href?: string;
  icon?: any;
  iconPadding?: string;
  isImage?: boolean;
  imageSrc?: string;
  imageAlt?: string;
}

const { 
  title, 
  description, 
  color, 
  href, 
  icon, 
  iconPadding = "p-4",
  isImage = false,
  imageSrc,
  imageAlt 
} = Astro.props;
---

<Card href={href} color={color}>
  <div
    class={`absolute inset-0 bg-gradient-to-tr from-flexoki-${color}/[0.03] to-transparent opacity-80 [mask-image:linear-gradient(45deg,#000_25%,transparent_25%,transparent_50%,#000_50%,#000_75%,transparent_75%,transparent)] [mask-size:8px_8px] pointer-events-none`}
  >
  </div>
  <div class="flex items-start gap-4">
    <CardIcon color={color} padding={iconPadding}>
      {isImage ? (
        <img
          src={imageSrc}
          alt={imageAlt}
          class="w-full h-full object-cover"
        />
      ) : (
        <slot name="icon" />
      )}
    </CardIcon>
    <div class={href ? "flex-grow" : ""}>
      {href && (
        <div class="flex items-center justify-between">
          <h3
            class={`text-flexoki-tx font-medium group-hover:text-flexoki-${color} transition-colors`}
          >
            {title}
          </h3>
          <span
            class="text-flexoki-tx-3 group-hover:translate-x-1 transition-transform"
          >â†’</span>
        </div>
      )}
      {!href && (
        <h3
          class={`text-flexoki-tx font-medium group-hover:text-flexoki-${color} transition-colors`}
        >
          {title}
        </h3>
      )}
      <p class="text-sm text-flexoki-tx-2 !m-0">
        {description}
      </p>
    </div>
  </div>
</Card>