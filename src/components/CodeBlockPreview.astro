---
import CustomCode from "./CustomCode.astro";

interface Props {
    title?: string;
    content: string;
    previewHeight?: string;
}

const { title = "Preview:", content, previewHeight = "250px" } = Astro.props;
---

<div class="content-preview relative pt-[2em]">
    <div class="flex justify-between items-center mb-4">
        <h2 class="text-lg font-medium text-flexoki-tx my-0">{title}</h2>
        <button
            class="toggle-button inline-flex items-center gap-1.5 px-3 py-1.5 text-xs font-medium text-flexoki-tx-2 hover:text-foreground transition-colors rounded-full border border-flexoki-ui hover:border-flexoki-tx-2 bg-background/50 hover:bg-background cursor-pointer"
        >
            <svg
                class="w-3.5 h-3.5 transition-transform duration-200"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6h16M4 12h16m-7 6h7"></path>
            </svg>
            <span class="hidden md:inline">View Full</span>
        </button>
    </div>
    <div
        class="preview-wrapper relative overflow-hidden rounded-lg border border-flexoki-ui"
        style={`max-height: ${previewHeight};`}
    >
        <CustomCode
            className="preview-content"
            code={content}
            lang="markdown"
            wrap={false}
            inline={false}
        />
        <div
            class="fade-overlay absolute bottom-0 left-0 right-0 h-32 pointer-events-none"
        >
        </div>
    </div>
</div>

<style>
    .fade-overlay {
        background: linear-gradient(
            to bottom,
            transparent,
            var(--color-flexoki-bg) 70%
        );
        opacity: 0.8;
        transition: opacity 300ms ease-in-out;
    }

    .preview-wrapper.expanded .fade-overlay {
        opacity: 0;
    }

    .preview-wrapper {
        transition: max-height 300ms cubic-bezier(0.4, 0, 0.2, 1);
    }

    .preview-wrapper.expanded {
        max-height: none !important;
    }

    /* Gradient animation on hover */
    .preview-wrapper:hover .gradient-bg {
        animation: gradientShift 2s ease infinite;
    }

    @keyframes gradientShift {
        0% {
            opacity: 0.02;
        }
        50% {
            opacity: 0.04;
        }
        100% {
            opacity: 0.02;
        }
    }
</style>

<script>
    function setupToggle(container: HTMLElement) {
        const button = container.querySelector(".toggle-button");
        const wrapper = container.querySelector(".preview-wrapper");
        const buttonText = button?.querySelector(".md\\:inline");
        const buttonIcon = button?.querySelector("svg");

        if (!button || !wrapper || !buttonText || !buttonIcon) return;

        let isExpanded = false;

        const toggle = () => {
            isExpanded = !isExpanded;
            wrapper.classList.toggle("expanded");
            buttonText.textContent = isExpanded ? "View Less" : "View Full";
            buttonIcon.style.transform = isExpanded ? "rotate(180deg)" : "";

            if (isExpanded) {
                requestAnimationFrame(() => {
                    wrapper.scrollIntoView({
                        behavior: "smooth",
                        block: "nearest",
                    });
                });
            }
        };

        button.addEventListener("click", toggle);
    }

    // Initialize on page load
    const init = () => {
        document
            .querySelectorAll<HTMLElement>(".content-preview")
            .forEach(setupToggle);
    };

    // Setup on both initial load and page transitions
    document.addEventListener("astro:page-load", init);
    init();
</script>
